import { IValidatable } from '../abstract/IValidatable';
import { TQualifier } from '../abstract/TQualifier';
import { TQualifierCollection } from '../abstract/TQualifierCollection';
import { TValidationResult } from '../abstract/TValidationResult';
import { TValidatorCollection } from '../abstract/TValidatorCollection';
import { ValidationResult } from './ValidationResult';
import { RuleApi } from './RuleApi';
import { TPrecondition } from '../abstract/TPrecondition';
export declare class Rule implements IValidatable {
    name: string;
    protected _qualifiers: TQualifierCollection;
    protected _validators: TValidatorCollection;
    protected _stopOnFirstFailure: boolean;
    readonly qualifiers: TQualifierCollection;
    readonly validators: TValidatorCollection;
    constructor(name?: string);
    protected define(rule: Rule): void;
    enum(allowedValues: Array<string | number>): RuleApi;
    length(min: number, max: number): RuleApi;
    lengthOrEmpty(min: number, max: number): RuleApi;
    matches(rx: RegExp): RuleApi;
    notNull(): RuleApi;
    notEmpty(): RuleApi;
    max(num: number): RuleApi;
    maxExclusiveOf(num: number): RuleApi;
    min(num: number): RuleApi;
    minExclusiveOf(num: number): RuleApi;
    must(qualifier: TQualifier): RuleApi;
    stopOnFirstFailure(): void;
    cascade(): void;
    using(validatable: IValidatable): Rule;
    if(precondition: TPrecondition, define: (rule: Rule) => void): Rule;
    protected __getValidationResult(propValue: any, parentValue: any, customOptions: any): TValidationResult;
    protected __runQualifiers(result: TValidationResult, propValue: any, parentValue: any, customOptions: any): TValidationResult;
    protected __runValidators(result: TValidationResult, propValue: any, parentValue: any, customOptions: any): TValidationResult;
    validate(value: any, parentValue: any, customOptions?: any): ValidationResult;
}
