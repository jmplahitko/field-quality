"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.beBoolean = beBoolean;
exports.beInRange = beInRange;
exports.beValidEnum = beValidEnum;
exports.length = length;
exports.lengthOrEmpty = lengthOrEmpty;
exports.match = match;
exports.max = max;
exports.min = min;
exports.notNull = notNull;
exports.notEmpty = notEmpty;

var _quality = require("./quality");

function beBoolean(value) {
  return (0, _quality.isBoolean)(value);
}

function beInRange(num1, num2) {
  return function beInRange(value) {
    return (0, _quality.isNumber)(value) && !isNaN(value) ? value >= num1 && value <= num2 : false;
  };
}

function beValidEnum(arr) {
  return function beValidEnum(value) {
    return arr.includes(value);
  };
}

function length(num1, num2) {
  return function beValidLength(value) {
    return ((0, _quality.isString)(value) || (0, _quality.isArray)(value)) && (0, _quality.isNumber)(value.length) ? value.length >= num1 && value.length <= num2 : false;
  };
}

function lengthOrEmpty(num1, num2) {
  return function beValidLengthOrEmpty(value) {
    if ((0, _quality.isNull)(value) || (0, _quality.isUndefined)(value)) {
      return true;
    } else {
      return ((0, _quality.isString)(value) || (0, _quality.isArray)(value)) && (0, _quality.isNumber)(value.length) ? value.length >= num1 && value.length <= num2 : false;
    }
  };
}

function match(rx) {
  return function matches(value) {
    return rx.test(value);
  };
}

function max(num) {
  return function beLessThan(val) {
    return val <= num;
  };
}

function min(num) {
  return function beGreaterThan(val) {
    return val >= num;
  };
}

function notNull(value) {
  return !(0, _quality.isNull)(value);
}

function notEmpty(value) {
  return (0, _quality.isNull)(value) || (0, _quality.isUndefined)(value) ? false : !(0, _quality.isEmpty)(value);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9xdWFsaWZpZXJzLnRzIl0sIm5hbWVzIjpbImJlQm9vbGVhbiIsInZhbHVlIiwiYmVJblJhbmdlIiwibnVtMSIsIm51bTIiLCJpc05hTiIsImJlVmFsaWRFbnVtIiwiYXJyIiwiaW5jbHVkZXMiLCJsZW5ndGgiLCJiZVZhbGlkTGVuZ3RoIiwibGVuZ3RoT3JFbXB0eSIsImJlVmFsaWRMZW5ndGhPckVtcHR5IiwibWF0Y2giLCJyeCIsIm1hdGNoZXMiLCJ0ZXN0IiwibWF4IiwibnVtIiwiYmVMZXNzVGhhbiIsInZhbCIsIm1pbiIsImJlR3JlYXRlclRoYW4iLCJub3ROdWxsIiwibm90RW1wdHkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFFTyxTQUFTQSxTQUFULENBQW1CQyxLQUFuQixFQUErQjtBQUNyQyxTQUFPLHdCQUFVQSxLQUFWLENBQVA7QUFDQTs7QUFFTSxTQUFTQyxTQUFULENBQW1CQyxJQUFuQixFQUFpQ0MsSUFBakMsRUFBK0M7QUFDckQsU0FBTyxTQUFTRixTQUFULENBQW1CRCxLQUFuQixFQUErQjtBQUNyQyxXQUFRLHVCQUFTQSxLQUFULEtBQW1CLENBQUNJLEtBQUssQ0FBQ0osS0FBRCxDQUExQixHQUFzQ0EsS0FBSyxJQUFJRSxJQUFULElBQWlCRixLQUFLLElBQUlHLElBQWhFLEdBQXdFLEtBQS9FO0FBQ0EsR0FGRDtBQUdBOztBQUVNLFNBQVNFLFdBQVQsQ0FBcUJDLEdBQXJCLEVBQWdEO0FBQ3RELFNBQU8sU0FBU0QsV0FBVCxDQUFxQkwsS0FBckIsRUFBaUM7QUFDdkMsV0FBT00sR0FBRyxDQUFDQyxRQUFKLENBQWFQLEtBQWIsQ0FBUDtBQUNBLEdBRkQ7QUFHQTs7QUFFTSxTQUFTUSxNQUFULENBQWdCTixJQUFoQixFQUE4QkMsSUFBOUIsRUFBNEM7QUFDbEQsU0FBTyxTQUFTTSxhQUFULENBQXVCVCxLQUF2QixFQUFtQztBQUN6QyxXQUFRLENBQUMsdUJBQVNBLEtBQVQsS0FBbUIsc0JBQVFBLEtBQVIsQ0FBcEIsS0FBdUMsdUJBQVNBLEtBQUssQ0FBQ1EsTUFBZixDQUF4QyxHQUFtRVIsS0FBSyxDQUFDUSxNQUFOLElBQWdCTixJQUFoQixJQUF3QkYsS0FBSyxDQUFDUSxNQUFOLElBQWdCTCxJQUEzRyxHQUFtSCxLQUExSDtBQUNBLEdBRkQ7QUFHQTs7QUFFTSxTQUFTTyxhQUFULENBQXVCUixJQUF2QixFQUFxQ0MsSUFBckMsRUFBbUQ7QUFDekQsU0FBTyxTQUFTUSxvQkFBVCxDQUE4QlgsS0FBOUIsRUFBMEM7QUFDaEQsUUFBSSxxQkFBT0EsS0FBUCxLQUFpQiwwQkFBWUEsS0FBWixDQUFyQixFQUF5QztBQUN4QyxhQUFPLElBQVA7QUFDQSxLQUZELE1BRU87QUFDTixhQUFRLENBQUMsdUJBQVNBLEtBQVQsS0FBbUIsc0JBQVFBLEtBQVIsQ0FBcEIsS0FBdUMsdUJBQVNBLEtBQUssQ0FBQ1EsTUFBZixDQUF4QyxHQUFtRVIsS0FBSyxDQUFDUSxNQUFOLElBQWdCTixJQUFoQixJQUF3QkYsS0FBSyxDQUFDUSxNQUFOLElBQWdCTCxJQUEzRyxHQUFtSCxLQUExSDtBQUNBO0FBQ0QsR0FORDtBQU9BOztBQUVNLFNBQVNTLEtBQVQsQ0FBZUMsRUFBZixFQUEyQjtBQUNqQyxTQUFPLFNBQVNDLE9BQVQsQ0FBaUJkLEtBQWpCLEVBQTZCO0FBQ25DLFdBQU9hLEVBQUUsQ0FBQ0UsSUFBSCxDQUFRZixLQUFSLENBQVA7QUFDQSxHQUZEO0FBR0E7O0FBRU0sU0FBU2dCLEdBQVQsQ0FBYUMsR0FBYixFQUEwQjtBQUNoQyxTQUFPLFNBQVNDLFVBQVQsQ0FBb0JDLEdBQXBCLEVBQWlDO0FBQ3ZDLFdBQU9BLEdBQUcsSUFBSUYsR0FBZDtBQUNBLEdBRkQ7QUFHQTs7QUFFTSxTQUFTRyxHQUFULENBQWFILEdBQWIsRUFBMEI7QUFDaEMsU0FBTyxTQUFTSSxhQUFULENBQXVCRixHQUF2QixFQUFvQztBQUMxQyxXQUFPQSxHQUFHLElBQUlGLEdBQWQ7QUFDQSxHQUZEO0FBR0E7O0FBRU0sU0FBU0ssT0FBVCxDQUFpQnRCLEtBQWpCLEVBQTZCO0FBQ25DLFNBQU8sQ0FBQyxxQkFBT0EsS0FBUCxDQUFSO0FBQ0E7O0FBRU0sU0FBU3VCLFFBQVQsQ0FBa0J2QixLQUFsQixFQUE4QjtBQUNwQyxTQUFPLHFCQUFPQSxLQUFQLEtBQWlCLDBCQUFZQSxLQUFaLENBQWpCLEdBQXNDLEtBQXRDLEdBQThDLENBQUMsc0JBQVFBLEtBQVIsQ0FBdEQ7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzQXJyYXksIGlzQm9vbGVhbiwgaXNFbXB0eSwgaXNOdWxsLCBpc051bWJlciwgaXNTdHJpbmcsIGlzVW5kZWZpbmVkIH0gZnJvbSAnLi9xdWFsaXR5JztcblxuZXhwb3J0IGZ1bmN0aW9uIGJlQm9vbGVhbih2YWx1ZTogYW55KSB7XG5cdHJldHVybiBpc0Jvb2xlYW4odmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmVJblJhbmdlKG51bTE6IG51bWJlciwgbnVtMjogbnVtYmVyKSB7XG5cdHJldHVybiBmdW5jdGlvbiBiZUluUmFuZ2UodmFsdWU6IGFueSkge1xuXHRcdHJldHVybiAoaXNOdW1iZXIodmFsdWUpICYmICFpc05hTih2YWx1ZSkpID8gKHZhbHVlID49IG51bTEgJiYgdmFsdWUgPD0gbnVtMikgOiBmYWxzZTtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYmVWYWxpZEVudW0oYXJyOiBBcnJheTxzdHJpbmd8bnVtYmVyPikge1xuXHRyZXR1cm4gZnVuY3Rpb24gYmVWYWxpZEVudW0odmFsdWU6IGFueSkge1xuXHRcdHJldHVybiBhcnIuaW5jbHVkZXModmFsdWUpO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsZW5ndGgobnVtMTogbnVtYmVyLCBudW0yOiBudW1iZXIpIHtcblx0cmV0dXJuIGZ1bmN0aW9uIGJlVmFsaWRMZW5ndGgodmFsdWU6IGFueSkge1xuXHRcdHJldHVybiAoKGlzU3RyaW5nKHZhbHVlKSB8fCBpc0FycmF5KHZhbHVlKSkgJiYgaXNOdW1iZXIodmFsdWUubGVuZ3RoKSkgPyAodmFsdWUubGVuZ3RoID49IG51bTEgJiYgdmFsdWUubGVuZ3RoIDw9IG51bTIpIDogZmFsc2U7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxlbmd0aE9yRW1wdHkobnVtMTogbnVtYmVyLCBudW0yOiBudW1iZXIpIHtcblx0cmV0dXJuIGZ1bmN0aW9uIGJlVmFsaWRMZW5ndGhPckVtcHR5KHZhbHVlOiBhbnkpIHtcblx0XHRpZiAoaXNOdWxsKHZhbHVlKSB8fCBpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gKChpc1N0cmluZyh2YWx1ZSkgfHwgaXNBcnJheSh2YWx1ZSkpICYmIGlzTnVtYmVyKHZhbHVlLmxlbmd0aCkpID8gKHZhbHVlLmxlbmd0aCA+PSBudW0xICYmIHZhbHVlLmxlbmd0aCA8PSBudW0yKSA6IGZhbHNlO1xuXHRcdH1cblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2gocng6IFJlZ0V4cCkge1xuXHRyZXR1cm4gZnVuY3Rpb24gbWF0Y2hlcyh2YWx1ZTogYW55KSB7XG5cdFx0cmV0dXJuIHJ4LnRlc3QodmFsdWUpO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXgobnVtOiBudW1iZXIpIHtcblx0cmV0dXJuIGZ1bmN0aW9uIGJlTGVzc1RoYW4odmFsOiBudW1iZXIpIHtcblx0XHRyZXR1cm4gdmFsIDw9IG51bTtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbWluKG51bTogbnVtYmVyKSB7XG5cdHJldHVybiBmdW5jdGlvbiBiZUdyZWF0ZXJUaGFuKHZhbDogbnVtYmVyKSB7XG5cdFx0cmV0dXJuIHZhbCA+PSBudW07XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vdE51bGwodmFsdWU6IGFueSkge1xuXHRyZXR1cm4gIWlzTnVsbCh2YWx1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub3RFbXB0eSh2YWx1ZTogYW55KSB7XG5cdHJldHVybiBpc051bGwodmFsdWUpIHx8IGlzVW5kZWZpbmVkKHZhbHVlKSA/IGZhbHNlIDogIWlzRW1wdHkodmFsdWUpO1xufSJdfQ==